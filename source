import cv2 import numpy as np from sklearn.cluster import KMeans import matplotlib.pyplot as plt from collections import Counter

def read_image(image_path): """Load image from the given path.""" image = cv2.imread(image_path) image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) return image

def resize_image(image, width=600): """Resize image to specified width, maintaining aspect ratio.""" ratio = width / image.shape[1] dimensions = (width, int(image.shape[0] * ratio)) return cv2.resize(image, dimensions)

def flatten_image(image): """Flatten image from 3D to 2D array.""" return image.reshape(-1, 3)

def get_dominant_colors(image, num_colors=5): """Apply KMeans to extract dominant colors.""" flattened = flatten_image(image) model = KMeans(n_clusters=num_colors) labels = model.fit_predict(flattened) counts = Counter(labels) ordered_colors = [model.cluster_centers_[i] for i in counts.keys()] hex_colors = ['#{:02x}{:02x}{:02x}'.format(int(c[0]), int(c[1]), int(c[2])) for c in ordered_colors] return hex_colors, ordered_colors, list(counts.values())

def plot_colors(hex_colors, counts): """Display a color bar of dominant colors.""" plt.figure(figsize=(8, 2)) plt.pie(counts, labels=hex_colors, colors=hex_colors, startangle=90) plt.title('Dominant Colors') plt.axis('equal') plt.show()

def main(image_path): image = read_image(image_path) image = resize_image(image) hex_colors, rgb_colors, counts = get_dominant_colors(image, num_colors=5) print("Dominant Colors (Hex):", hex_colors) plot_colors(hex_colors, counts)

if name == "main": import sys if len(sys.argv) < 2: print("Usage: python color_detection_app.py <image_path>") else: main(sys.argv[1])
