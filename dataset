import os import cv2 import numpy as np import pandas as pd from sklearn.cluster import KMeans from collections import Counter

IMAGE_FOLDER = 'color_dataset/images' OUTPUT_CSV = 'color_dataset/labels.csv'

def read_image(image_path): image = cv2.imread(image_path) image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) return cv2.resize(image, (200, 200))

def flatten_image(image): return image.reshape(-1, 3)

def get_dominant_colors(image, num_colors=3): flat_image = flatten_image(image) kmeans = KMeans(n_clusters=num_colors, random_state=42) labels = kmeans.fit_predict(flat_image) counts = Counter(labels) ordered_colors = [kmeans.cluster_centers_[i] for i in counts.keys()] hex_colors = [ '#{:02x}{:02x}{:02x}'.format(int(c[0]), int(c[1]), int(c[2])) for c in ordered_colors ] return ','.join(hex_colors)

def generate_dataset(): os.makedirs('color_dataset', exist_ok=True) data = [] for file_name in os.listdir(IMAGE_FOLDER): if file_name.lower().endswith(('.jpg', '.jpeg', '.png')): image_path = os.path.join(IMAGE_FOLDER, file_name) try: image = read_image(image_path) dominant_colors = get_dominant_colors(image) data.append({'image_name': file_name, 'dominant_colors': dominant_colors}) except Exception as e: print(f"Failed processing {file_name}: {e}")

df = pd.DataFrame(data)
df.to_csv(OUTPUT_CSV, index=False)
print(f"Dataset created and saved to {OUTPUT_CSV}")

if name == 'main': generate_dataset()
